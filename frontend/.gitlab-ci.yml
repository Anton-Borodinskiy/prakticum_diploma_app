stages:
  - test
  - build
  - build-docker-front
  - release


variables:
  IMAGE_TAG: $CI_COMMIT_SHA
  VERSION: 1.0.${CI_PIPELINE_ID}

build-code-job:  # задача с именем build-code-job
  stage: build   # этап build
  image: node:lts-alpine
  script:        # объявление скрипта
    - cd frontend 
    - npm install # загрузка всех сторонних зависимостей
    - export NODE_ENV=production
    - export VUE_APP_API_URL=/
    - npm run build # запуск сборки кода
    - cd .. 
    - mv frontend/dist/ frontend-${VERSION}/ # копирование собранного фронтэнда
    - tar -czvf frontend-${VERSION}.tar.gz frontend-${VERSION}
  artifacts:
    paths:
      - frontend-${VERSION}/  # сохранение собранного фронтэнда как артефакт
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт 


build-frontend-docker:
  stage: build-docker-front
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp -r frontend-${VERSION} frontend/public_html
    - ls -la frontend/public_html
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
      .
- docker push $CI_REGISTRY_IMAGE/momo-frontend:$VERSION


upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/momo-frontend:$VERSION $CI_REGISTRY_IMAGE/momo-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:latest



sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_FRONTEND}"
      -Dsonar.sources="${CI_PROJECT_DIR}/frontend"
      -Dsonar.host.url="${SONARQUBE_URL}"
      -Dsonar.login="${SONAR_LOGIN}"
